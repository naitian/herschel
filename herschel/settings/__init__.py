"""
Django settings for herschel project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_PATH = "/"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "cg&%)5&wi_w7b$_)tyx4zs_p667trtf3(n6xo%jbwqj)@jd8g7"

# SECURITY WARNING: don't run with debug turned on in production!
# for production, set DEBUG=FALSE AND PRODUCTION=TRUE
DEBUG = os.getenv("DEBUG", "TRUE") == "TRUE"
PRODUCTION = os.getenv("PRODUCTION", "FALSE") == "TRUE"
DEBUG = DEBUG or not PRODUCTION

if PRODUCTION:
    print("Using prod settings: PRODUCTION={}, DEBUG={}".format(PRODUCTION, DEBUG))

if DEBUG:
    print("Using debug settings: PRODUCTION={}, DEBUG={}".format(PRODUCTION, DEBUG))

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "pipeline",
    "herschel.apps.main",
    "herschel.apps.submissions",
    "herschel.apps.staff",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "herschel.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "herschel.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
if PRODUCTION:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "HOST": "localhost",
            "NAME": "herschel",
            "USER": "herschel",
            "PASSWORD": os.environ.get("DB_PASSWORD", ""),
            "PORT": 5432,
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

LOGIN_URL = "/login/"


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Uploaded Files

MEDIA_ROOT = "./uploads"
MEDIA_URL = "/uploads/"


# Email
EMAIL_FROM = "noreply@blueprintlm.com"
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    # TODO: Use Amazon SES
    # https://github.com/django-ses/django-ses
    EMAIL_BACKEND = 'django_ses.SESBackend'

# Logging
if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
           'file': {
               'level': 'DEBUG',
               'class': 'logging.FileHandler',
               'filename': 'log.django',
           },
        },
        'loggers': {
            'django': {
                'handlers': ['console','file'],
                'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            },
        },
    }

# Google Drive
GOOGLE_DRIVE_CREDENTIALS_PATH = os.path.join(BASE_DIR, "settings/service_account.json")
GOOGLE_DRIVE_TEAM_DRIVE_ID = "0AI0oPd7S5vpnUk9PVA"
GOOGLE_DRIVE_FOLDER_IDS = {
    "submissions": "1k-cj8xRIaL_zriANFVbtTU8CHqnhj1lT",
    "PROSE": "1tUiY0KSIUKbhBPti_oyNcxSeUL3_LPK8",
    "POETRY": "1yl4PFwF2OVYcueKf2YKHyFa_szWeSh1e",
    "PHOTO": "1w77d4YnA1VmRdihaILzSGM0MqljCcOZZ",
    "VIS": "17LkbzUN5-wu-Fb0roKxAcIkgp2d0_Znz",
    "OTHER": "1Vxx7o5YcjHlDbOMJXVuEnDvxj8mj0GzJ",
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "collected_static")
STATICFILES_STORAGE = "pipeline.storage.PipelineCachedStorage"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "pipeline.finders.PipelineFinder",
)

PIPELINE = {
    "STYLESHEETS": {
        "base": {
            "source_filenames": ("css/vendor/normalize.css", "css/base.scss"),
            "output_filename": "css/base.css",
        },
        "staff": {
            "source_filenames": ("css/staff/base.scss",),
            "output_filename": "css/staff.css",
        },
        "main": {
            "source_filenames": {"css/main/main.scss"},
            "output_filename": "css/main.css",
        },
        "gallery": {
            "source_filenames": {"css/main/gallery.scss"},
            "output_filename": "css/gallery.css",
        },
        "form": {
            "source_filenames": {"css/form.scss"},
            "output_filename": "css/form.css",
        },
        "submit": {
            "source_filenames": {"css/submissions/submit.scss"},
            "output_filename": "css/submit.css",
        },
        "login": {
            "source_filenames": {"css/submissions/login.scss"},
            "output_filename": "css/login.css",
        },
    },
    "JAVASCRIPT": {
        "base": {"source_filenames": ("js/base.js",), "output_filename": "js/base.js"}
    },
}

PIPELINE["CSS_COMPRESSOR"] = "pipeline.compressors.yuglify.YuglifyCompressor"
PIPELINE["JS_COMPRESSOR"] = "pipeline.compressors.yuglify.YuglifyCompressor"
PIPELINE["COMPILERS"] = ("pipeline.compilers.sass.SASSCompiler",)

if os.getenv("SASS_BINARY"):
    PIPELINE["SASS_BINARY"] = os.getenv("SASS_BINARY")

if PRODUCTION:
    from .production import *
